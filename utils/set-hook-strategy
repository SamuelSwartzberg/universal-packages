#!/usr/bin/env bash

target="${1?Target expected}"
type="${2:-git-packages}"
hook_type="${3:-default}"
host_package_identifier="$(host-package-ident "$target" "$type")"
HOOK_HOME="$DATA_HOME/hooks/$host_package_identifier"
hook_path="$HOOK_HOME/$hook_type"
RUN_ON_HOME="$DATA_HOME/run-on/$host_package_identifier"

DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/upkg/$type"

IFS=$'\n'
shopt -s nullglob

for prev_hook_location in "$RUN_ON_HOME"/*/*/"$hook_type"; # RUN_ON_HOME/<run_on>/<policy>/<hook_type>
do
  rm "$prev_hook_location"
done

unset IFS

while true; do
  options=(
    "1) install"
    "2) upgrade"
    "3) install,upgrade"
    # remove/uninstall may be added later
  )
  run_on_choice=$(printf '%s\n' "${options[@]}" | fzf --prompt="Select event(s) to run hook $hook_type on: " | cut -d ' ' -f '2-')
  if [[ -z "$run_on_choice" ]]; then
    ask "No choice made. Do you want to cancel & exit?" Y && exit 1
  else
    ask "You chose $run_on_choice, is that correct?" Y && break 2
  fi
done



while true; do
  options=(
    "1) always"
    "2) ask-yes"
    "3) ask-no"
    "4) never"
  )
  policy_choice=$(printf '%s\n' "${options[@]}" | fzf --prompt="Select policy for running hook $hook_type on $run_on_choice: " | cut -d ' ' -f '2-')
  if [[ -z "$policy_choice" ]]; then
    ask "No choice made. Do you want to cancel & exit?" Y && exit 1
  else
    ask "You chose $policy_choice, is that correct?" Y && break 2
  fi
done

# iterate through comma-separated run_on_choice

IFS=',' read -ra run_on_choices <<< "$run_on_choice"

for run_on in "${run_on_choices[@]}"; do
  run_on_path="$RUN_ON_HOME/$run_on/$policy_choice"
  mkdir -p "$run_on_path"
  ln -sf "$hook_path" "$run_on_path/$hook_type"
done

shopt -u nullglob