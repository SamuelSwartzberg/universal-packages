#!/usr/bin/env bash

subcommand="$1"
shift

# package name = name of the repo and thus the directory in $GIT_PACKAGES
# package identifier = <github username>/<package name>
# package url = https://github.com/<package identifier>[.git]

function get_package_name_from_anything() {
  basename "${1:?}" ".git"
}

function get_git_url_from_installed_thing() {
  local package_name
  package_name="$(get_package_name_from_anything "${1:?}")"
  (
    cd "${GIT_PACKAGES:?}/${package_name:?}" && { git config --get remote.origin.url || echo "package has no remote url: ${package_name:?}"; }
  )
}

function get_git_url_from_package_identifier_or_url() {
  echo "https://github.com/$(get_package_identifier_from_url_or_package_identifier "${1:?}")"
}

function get_package_identifier_from_url_or_package_identifier() {
  echo "${1/https:\/\/github.com\//}" | sed 's/\.git//'
}

function get_package_identifier_from_package_name() {
  get_package_identifier_from_url_or_package_identifier "$(get_git_url_from_installed_thing "${1:?}")"
}

function get_package_path() {
  local package_name
  package_name="$(get_package_name_from_anything "${1:?}")"
  echo "${GIT_PACKAGES:?}/${package_name:?}"
}

case "$subcommand" in
"test-existence")
  [[ -d "$GIT_PACKAGES" ]] || exit 1
  ;;
"list")
  for package in "$GIT_PACKAGES"/*; do
    get_package_identifier_from_package_name "$package"
  done
  ;;
"list-version") # version of a git package is the short hash of the current commit, since packages with actual releases and thus version are handled by `stew`
  for package in "$GIT_PACKAGES"/*; do
    echo "$(get_package_identifier_from_package_name "$package")@$(cd "$package" && git rev-parse --short HEAD)"
  done
  ;;
"install")
  (
    cd "$GIT_PACKAGES" || exit 1
    package_name="$(get_package_name_from_anything "${1:?}")"
    if [[ -d "$package_name" ]]; then
      echo "package already installed: $package_name"
      exit 1
    fi
    git clone "$(get_git_url_from_package_identifier_or_url "${1:?}")" || exit 1
    cd "$package_name" || exit 1
    (
      if [[ -f ./install.sh ]]; then
        ./install.sh
      elif [[ -x ./"$package_name" ]]; then
        ask "executable found with same name as package, link?" N && upkg git-packages link "$package_name" "$package_name"
      elif [[ -f ./Makefile ]]; then
        ask "Makefile found, run make?" N && make install
      else
        ask "package has no install script or makefile: $1, do you want to link an executable instead?" N && upkg git-packages link "$package_name"
      fi
    )
  )
  ;;
"remove")
  rm -rf "$(get_package_path "$1"))"
  ;;
"upgrade")
  (
    cd "$(get_package_path "$1")" &&
      git pull
  )
  ;;
"upgrade-all")
  for package in "$GIT_PACKAGES"/*; do
    (cd "$package" && git pull)
  done
  ;;
"which")
  (
    package_name="$(get_package_name_from_anything "${1:?}")"
    cd "$GIT_PACKAGES" || exit 1
    if [[ -d "$package_name" ]]; then
      get_package_path "$package_name"
    fi
  )
  ;;
"link") # args: package_name, executable_name, rename_to (optional)
  if [[ -z "$1" ]]; then
    echo "missing arguments"
    echo "usage: upkg git-packages link package_name [executable_name]"
    exit 1
  fi
  package_path="$(get_package_path "$1")"
  executable_name="$2"
  if [[ -z "$executable_name" ]]; then
    executable_name="$(select dir in $(ls "$package_path"); do
      echo "$dir"
      break
    done)"
  fi

  read -rp "rename to (optional): " rename_to

  chmod +x "$package_path"/"$executable_name"
  ln -sf "$package_path"/"$executable_name" "$HOMEBIN/${rename_to:-$executable_name}"
  ;;
"install-self")
  mkdir -p "$GIT_PACKAGES"
  ;;
esac
