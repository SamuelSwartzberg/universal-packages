#!/usr/bin/env bash

subcommand="$1"
shift


GIT_PACKAGES_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/upkg/git-packages"

GIT_PACKAGES="$GIT_PACKAGES_DATA_HOME/packages"
ln -sf "$GIT_PACKAGES" "$HOME/.local/git_packages" # legacy path
# the above path is legacy and will be migrated in the future

# package name = name of the repo and thus the directory in $GIT_PACKAGES
# package identifier = <github username>/<package name>
# host-package identifier = <hostname>/<package identifier>

case "$subcommand" in
"test-existence")
  [[ -d "$GIT_PACKAGES" ]] || exit 1
  ;;
"list")
  forall-packages git-packages listable-name
  ;;
"list-version") # version of a git package is the short hash of the current commit, since packages with actual releases and thus version are handled by `upkg gh`
  forall-packages git-packages with-version
  ;;
"with-version")
  (
    packagepath="$(package-path "$1")"
    host_package_identifier="$(host-package-ident "$1")"
    cd "$packagepath" || exit 1
    echo "$host_package_identifier@$(git rev-parse --short HEAD)"
  )
  ;;
"listable-name")
  host-package-ident "$1"
  ;;
"install")
  (
    package="$(cut -d "@" -f 1 <<<"$1")"
    version="$(cut -d "@" -f 2 <<<"$1")"
    host_package_identifier="$(host-package-ident "${package:?}")"
    cd "$GIT_PACKAGES" || exit 1
    echo "Cloning package repository $host_package_identifier ..."
    if [[ -d "$host_package_identifier" ]]; then
      echo "package already installed: $host_package_identifier"
      exit 1
    fi
    mkdir -p "$(dirname "$host_package_identifier")"
    git clone "$(git-remote-url "${package:?}")" "$host_package_identifier" || exit 1
    cd "$host_package_identifier" || exit 1
    if echo "$1" | grep -q @; then
      git checkout "$version" || exit 1
    fi
    "$0" build "$host_package_identifier"
  )
  ;;
"remove")
  remove-package "$1" git-packages
  ;;
"upgrade")
  package_path="$(package-path "$1")"
  host_package_identifier="$(host-package-ident "$1")"
  echo "Upgrading package at $package_path ..."
  if [[ -d "$package_path" ]]; then
    (cd "$package_path" && git checkout -- . && git pull) || exit 1

    if should-upgrade git-packages "$host_package_identifier"; then
      "$0" build "$host_package_identifier"
    fi
  else
    echo "package not installed: $package_path" >&2
    exit 1
  fi
  ;;
"upgrade-all")
  forall-packages git-packages upgrade
  ;;
"which")
  which-package "$1" git-packages
  ;;
"build")
  build-package "$1" git-packages
  ;;
"delete-install-script")
  remove-metadata git-packages install "$1"
  ;;
"delete-upgrade-strategy")
  remove-metadata git-packages run-on-upgrade "$1"
  ;;
"rebuild")
  "$0" delete-install-script "$1"
  "$0" delete-upgrade-strategy "$1"
  "$0" build "$1"
  ;;
"package-manager")
  echo "git-packages (no independent existence)"
  ;;
"package-manager-version")
  echo "0.0.0"
  ;;
"which-self")
  echo "$GIT_PACKAGES"
  ;;
"install-self")
  mkdir -p "$GIT_PACKAGES"
  ;;
"help")
  cat <<EOF
NAME

  git-packages - a subcommand of upkg, managing git packages

SYNOPSIS

  upkg git-packages [subcommand] [arguments...]

DESCRIPTION

  git-packages is a subcommand of upkg that provides an interface to manage git packages. It takes a subcommand as its first argument, and further arguments as subsequent arguments.

SUBCOMMANDS

  test-existence: Checks if the GIT_PACKAGES directory exists.

  list: Lists all git packages installed in the GIT_PACKAGES directory.

  list-version: Lists installed git packages with their current version (commit hash).

  listable-name: Gets the name of a package as used in \`list\` and related commands.

  install <package identifier|URL>: Installs a specific git package. 

  remove <package identifier|URL|name>: Removes a specific git package.

  upgrade <package identifier|URL|name>: Upgrades a specific git package to the latest commit on the default branch.

  upgrade-all: Upgrades all installed git packages to the latest commit on their default branches.

  which <package identifier|URL|name>: Returns the location of a specific git package. The argument can be a package identifier, the URL, or the name of the git repository.

  link <package name> [executable_name] [rename_to]: Creates a symbolic link to an executable file in the package directory. Requires the package name and optionally the executable name and a new name for the executable.

  package-manager: Prints the package manager name.

  package-manager-version: Prints the version of the package manager.

  which-self: Returns the path to the GIT_PACKAGES directory.

  install-self: Creates the GIT_PACKAGES directory if it doesn't exist.

  help: Prints the help message.

NOTES

  version is the short hash of the current commit, since packages with actual releases and thus version are handled by stew.
  package identifier is the package identifier in the format <username>/<repository name>.
EOF
  ;;
esac
