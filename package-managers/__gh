#!/usr/bin/env bash

subcommand="$1"
shift

GITHUB_PACKAGES_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/upkg/gh"
GITHUB_PACKAGES="${GITHUB_PACKAGES_DATA_HOME}/packages"
export GITHUB_PACKAGE_VERSIONS="${GITHUB_PACKAGES_DATA_HOME}/versions"
GITHUB_PACKAGE_FIXED_VERSIONS="${GITHUB_PACKAGES_DATA_HOME}/fixed-versions"
GITHUB_PACKAGE_ASSET_PATTERNS="${GITHUB_PACKAGES_DATA_HOME}/asset-patterns"
mkdir -p "$GITHUB_PACKAGES_DATA_HOME" "$GITHUB_PACKAGES" "$GITHUB_PACKAGE_VERSIONS" "$GITHUB_PACKAGE_FIXED_VERSIONS" "$GITHUB_PACKAGE_ASSET_PATTERNS"


function get_release_version(){
  host_package_identifier="${1:?Need host package identifier}"
  pattern="${2:?Need pattern}"
  gh release list -L 100 -R "$host_package_identifier" | tail -n +1 | grep -F -m 1 "${pattern}" | cut -f 3 -d$'\t'
}

if ! command -v gh >/dev/null; then
  echo "gh is not installed. Please install it first." >&2
  exit 1
fi

case "$subcommand" in
"test-existence")
  [[ -d "$GITHUB_PACKAGES/" ]] || exit 1
  ;;
"list-no-version")
  forall-packages "$0" gh listable-name
  ;;
"list-version") 
  # shellcheck disable=SC2016
  "$0" list-no-version | xargs -I {} bash -c 'echo "{}@$(cat "$GITHUB_PACKAGE_VERSIONS/{}")"'
  ;;
"list")
  for item in $($0 list-no-version); do
    target_version="$(cat "$GITHUB_PACKAGE_FIXED_VERSIONS/$item" 2>/dev/null)"
    if [[ -z "$target_version" ]]; then
      echo "$item"
    else
      echo "$item@$target_version"
    fi
  done
  ;;
"listable-name")
  host-package-ident "$1" gh
  ;;
"install")
  (
    package="$(cut -d "@" -f 1 <<<"$1")"
    version="$(cut -d "@" -f 2 <<<"$1")"
    if [[ -z "$version" ]] || [[ "$version" == "$package" ]]; then
      version_matcher="Latest	"
      version="Latest"
    else
      version_matcher="${version}	"
      
    fi
    host_package_identifier="$(host-package-ident "${package:?}" gh)"
    selected_version="$(get_release_version "$host_package_identifier" "$version_matcher")"
    if [[ -z "$selected_version" ]]; then
      echo "Version $version not found for package $package"
      if ask "Do you want to fzf a version instead?" Y; then
        selected_version="$(gh release list -L 100 -R "$host_package_identifier" | tail -n +2 | fzf | cut -f 3 -d$'\t')"
      else
        echo "Without a version, the package cannot be installed. Aborting..."
        exit 1
      fi
    fi
    if [[ -d "$GITHUB_PACKAGES/$host_package_identifier" ]]; then
      echo "Package $package already installed"
      exit 1
    else
      mkdir -p "$GITHUB_PACKAGES/$host_package_identifier"
    fi

    gh release view -R "$host_package_identifier" "$selected_version"
    if ask "Is this release correct?" Y; then
      false
    else
      echo "Aborting..."
      rm -r "${GITHUB_PACKAGES:?}/$host_package_identifier"
      exit 1
    fi
    
    if [[ -f "$GITHUB_PACKAGE_ASSET_PATTERNS/$host_package_identifier" ]]; then
      asset_pattern="$(cat "$GITHUB_PACKAGE_ASSET_PATTERNS/$host_package_identifier")"
    else
      ask "Currently, there is no asset pattern for $host_package_identifier. You will be shown a list of assets to choose from. You can edit the asset pattern afterwards. Enter to continue." Y
      asset_selected="$(gh release view --json assets -R "$host_package_identifier" "$selected_version"  | jq -r '.assets[].name' | fzf)"
      mkdir -p "$(dirname "$GITHUB_PACKAGE_ASSET_PATTERNS/$host_package_identifier")"
      echo "$asset_selected" > "$GITHUB_PACKAGE_ASSET_PATTERNS/$host_package_identifier"
      ask "Do you want to edit the asset pattern now? The format, according to \`gh\`, must be a glob pattern." Y && "$EDITOR" "$GITHUB_PACKAGE_ASSET_PATTERNS/$host_package_identifier"
      asset_pattern="$(cat "$GITHUB_PACKAGE_ASSET_PATTERNS/$host_package_identifier")"
    fi
    
    cd "$GITHUB_PACKAGES/$host_package_identifier" || exit 1
    gh release download -R "$host_package_identifier" "$selected_version" --pattern "$asset_pattern" || {
      echo "Download failed. Aborting..."
      rm -r "${GITHUB_PACKAGES:?}/$host_package_identifier"
      rm "$GITHUB_PACKAGE_ASSET_PATTERNS/$host_package_identifier"
      exit 1
    }

    mkdir -p "$(dirname "$GITHUB_PACKAGE_VERSIONS/$host_package_identifier")"
    echo "$selected_version" > "$GITHUB_PACKAGE_VERSIONS/$host_package_identifier"
    if [[ "$version" != "Latest" ]]; then
      mkdir -p "$(dirname "$GITHUB_PACKAGE_FIXED_VERSIONS/$host_package_identifier")"
      echo "$version" > "$GITHUB_PACKAGE_FIXED_VERSIONS/$host_package_identifier"
    fi
  )
  ;;
"remove")
  remove-package "$1" gh
  ;;
"upgrade")
 ( 
    package_path="$(package-path "$1" gh)"
    host_package_identifier="$(host-package-ident "$1" gh)"
    echo "Upgrading package at $package_path ..."
    if [[ -d "$package_path" ]]; then
      if [[ -f "$GITHUB_PACKAGE_FIXED_VERSIONS/$host_package_identifier" ]]; then
        target_version="$(cat "$GITHUB_PACKAGE_FIXED_VERSIONS/$host_package_identifier")"
        ask "You have installed the package at the specific version $target_version. Do you want to upgrade to the latest version instead? This will remove the entry to keep the package at $target_version. Currently, having multiple versions of the same package installed or more complex semver is not supported." Y && target_version="Latest"
        rm "$GITHUB_PACKAGE_FIXED_VERSIONS/$host_package_identifier"
      fi

      rm -r "$package_path"

      cd "$GITHUB_PACKAGES/$host_package_identifier" || exit 1

      selected_version="$(get_release_version "$host_package_identifier" "Latest	")"
      gh release download -R "$host_package_identifier" "$selected_version" --pattern "$(cat "$GITHUB_PACKAGE_ASSET_PATTERNS/$host_package_identifier")"

      mkdir -p "$(dirname "$GITHUB_PACKAGE_VERSIONS/$host_package_identifier")"
      echo "$selected_version" > "$GITHUB_PACKAGE_VERSIONS/$host_package_identifier"
    else
      echo "package not installed: $package_path" >&2
      exit 1
    fi
  )
  ;;
"upgrade-all")
  forall-packages "$0" gh upgrade
  ;;
"which")
  which-package "$1" gh
  ;;
"package-manager")
  echo "gh (no independent existence)"
  ;;
"package-manager-version")
  echo "0.0.0"
  ;;
"which-self")
  echo "$GITHUB_PACKAGES"
  ;;
"install-self")
  mkdir -p "$GITHUB_PACKAGES"
  ;;
*)
  echo "gh: unknown subcommand: $subcommand" >&2
  exit 1
  ;;
esac
